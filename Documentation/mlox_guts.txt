----------------------------------------------------------------------
                      mlox guts - Inside mlox
----------------------------------------------------------------------
Copyright 2011 John Moonsugar <john.moonsugar@gmail.com>
License: MIT License (see the file: License.txt)
----------------------------------------------------------------------
This is mlox_guts.txt which discusses the technical details of mlox's inner
workings.
See mlox_readme.txt for a basic information on what mlox is and how to use it.
See mlox_rules_guide.txt for a description of the rules and rule-base.
----------------------------------------------------------------------

You can skip this document if the nitty gritty details are not of interest. :)

o Introduction

The following is a brief summary of how mlox does what it does. Some
unfamiliar terms may be used, but they will all be explained in detail further
on.

The [Order] rules specify a Partial Order over the set of known plugins. This
allows us to sort your plugins using a topological sort. Topological sort
requires a DAG (directed acyclic graph) as input. Since we don't know ahead of
time if the graph defined by our rules is acyclic, we check for cycles every
time we add an edge (order rule), and throw out any edge that would cause a
cycle.

This process automatically gives precedence to the rules that come first: when
two rules conflict by causing a cycle, the first rule wins and the second is
chucked. So we take rules first from the highest priority source
(mlox_user.txt, if it exists), and if any subsequent rules from a lower
priority (mlox_base.txt) come along that would cause a cycle, we throw them
out. Priority holds within a rules file too, the rules at the top of the file
are higher priority than the ones that follow.

Since there are often many solutions to a partial order, we would prefer a
solution that doesn't change the starting load order much, as long as the
result still obeys all the specified [Order] rules. So mlox treats the current
load order as a tertiary set of input "pseudo-rules", with lower priority than
the rules specified by mlox_user.txt and mlox_base.txt.


==================================================

And now our story again, retold in detail:

mlox does two main things, which are outlined here and explained below:

1) mlox sorts your load order:
    For more details, see Load Order.md

2) mlox gives warnings
** about plugin conflicts
** and missing requirements

3) and annotates your plugins with notes

-----

2) mlox gives warnings
** about plugin conflicts

Some fairly common conflicts are those between mods, and even between
alternate versions of plugins within a mod. Often the Readme for a mod will
tell you about these conflicts, but in some cases they don't, particularly for
inter-mod conflicts. mlox can help out in this situation because the rule-set
lets us express plugin conflicts. So it's easy to tell a user they have
accidentally activated 2 versions of the same plugin, whereas they are
supposed to only activate one or the other. And it's easy to express conflicts
between mods too.

** and missing requirements

mlox can also check to see if a plugin is missing a dependency, which is
another fairly common occurrence. This situation can easily happen when a mod
offers compatibility patch plugins for other mods, and the user installs the
patch, but does not have the other mod. And sometimes mods are themselves
dependent on other mods, and if they are missing, they will not work. mlox's
rule-set can express these dependency relationships easily, and so help the
user by catching missing dependencies that have been overlooked.

3) and notes

Lastly, sometimes there may be some information about a plugin, perhaps some
known limitation or whether it should or should not be merged in a "Merged
Objects.esp" (with TESTOOL), that it is good to be reminded about, and mlox
can express these situations as well.


That concludes our tour around the guts of mlox. I hope you enjoyed our little
ride. Please have a safe trip home.
